{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","capco-contacts-manager/tests/app.lint-test.js","capco-contacts-manager/tests/helpers/destroy-app.js","capco-contacts-manager/tests/helpers/module-for-acceptance.js","capco-contacts-manager/tests/helpers/resolver.js","capco-contacts-manager/tests/helpers/start-app.js","capco-contacts-manager/tests/integration/components/employee-list-test.js","capco-contacts-manager/tests/integration/components/employees-list-test.js","capco-contacts-manager/tests/test-helper.js","capco-contacts-manager/tests/tests.lint-test.js","capco-contacts-manager/tests/unit/adapters/application-test.js","capco-contacts-manager/tests/unit/models/employee-test.js","capco-contacts-manager/tests/unit/models/setting-test.js","capco-contacts-manager/tests/unit/routes/details-test.js","capco-contacts-manager/tests/unit/routes/employees-test.js","capco-contacts-manager/tests/unit/routes/newemployee-test.js","capco-contacts-manager/tests/unit/routes/settings-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('capco-contacts-manager/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/employee-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/employee-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/employees-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/employees-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/employee.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/employee.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/setting.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/setting.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/details.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/details.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/employees.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/employees.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/newemployee.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/newemployee.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/settings.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/settings.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass ESLint\\n\\n');\n  });\n});","define('capco-contacts-manager/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  var run = Ember.run;\n  function destroyApp(application) {\n    run(application, 'destroy');\n  }\n});","define('capco-contacts-manager/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'capco-contacts-manager/tests/helpers/start-app', 'capco-contacts-manager/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var resolve = Ember.RSVP.resolve;\n});","define('capco-contacts-manager/tests/helpers/resolver', ['exports', 'capco-contacts-manager/resolver', 'capco-contacts-manager/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('capco-contacts-manager/tests/helpers/start-app', ['exports', 'capco-contacts-manager/app', 'capco-contacts-manager/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  var merge = Ember.merge;\n  var run = Ember.run;\n  function startApp(attrs) {\n    var attributes = merge({}, _environment.default.APP);\n    attributes = merge(attributes, attrs); // use defaults, but you can override;\n\n    return run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('capco-contacts-manager/tests/integration/components/employee-list-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('employee-list', 'Integration | Component | employee list', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Vf3Wbwu4\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"employee-list\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Qt+vWhYo\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"employee-list\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('capco-contacts-manager/tests/integration/components/employees-list-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('employees-list', 'Integration | Component | employees list', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"H/g8ADPQ\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"employees-list\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"VNKlR+8C\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"employees-list\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('capco-contacts-manager/tests/test-helper', ['capco-contacts-manager/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('capco-contacts-manager/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/employee-list-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/employee-list-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/employees-list-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/employees-list-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/employee-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/employee-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/setting-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/setting-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/details-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/details-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/employees-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/employees-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/newemployee-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/newemployee-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/settings-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/settings-test.js should pass ESLint\\n\\n');\n  });\n});","define('capco-contacts-manager/tests/unit/adapters/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('capco-contacts-manager/tests/unit/models/employee-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('employee', 'Unit | Model | employee', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('capco-contacts-manager/tests/unit/models/setting-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('setting', 'Unit | Model | setting', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('capco-contacts-manager/tests/unit/routes/details-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:details', 'Unit | Route | details', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('capco-contacts-manager/tests/unit/routes/employees-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:employees', 'Unit | Route | employees', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('capco-contacts-manager/tests/unit/routes/newemployee-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:newemployee', 'Unit | Route | newemployee', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('capco-contacts-manager/tests/unit/routes/settings-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:settings', 'Unit | Route | settings', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","require('capco-contacts-manager/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;","file":"tests.js"}